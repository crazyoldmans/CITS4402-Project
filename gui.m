%{
gui.m
By Alexander Mazur, 20516281
For the CITS4402 2015 project
    This code displays a GUI which allows a user to view SIFT-based image
    matching.

    The code specifies the textual, image and button elements, and provides
    controls for user interaction.
%}
function gui(objects, scenes)
    % Initialise GUI
    f        = figure( ...
                'Visible',  'off', ...
                'Position', [0, 0, 1000, 500] ...
               );
           
    % Initialise button elements       
    hbtn1    = uicontrol( ...
                'Style',    'pushbutton', ...
                'String',   'Match object', ...
                'Position', [20, 310, 120, 30], ...
                'Callback', {@match_button_Callback} ...
               );
    hbtn2    = uicontrol( ...
                'Style',    'pushbutton', ...
                'String',   'Calculate all matches', ...
                'Position', [20, 230, 120, 30], ...
                'Callback', {@matchall_button_Callback} ...
               );
    hbtn3    = uicontrol( ...
                'Style',    'pushbutton', ...
                'String',   'Match object', ...
                'Enable',   'off', ...
                'Position', [20, 130, 120, 30], ...
                'Callback', {@match_button_Callback} ...
               );
           
    % Initialise editable text box element
    hedt1    = uicontrol( ...
                'Style',    'edit', ...
                'String',   '10', ...
                'Position', [100, 100, 30, 20], ...
                'Callback', {@thrs_edit_Callback} ...
               );

    % Initialise popup menu element
    hpop1     = uicontrol( ...
                'Style',    'popup', ...
                'String',   {objects.name}, ...
                'Position', [20, 340, 120, 30], ...
                'Callback', {@obj_popup_Callback} ...
               );
    % Initialise popup menu element
    hpop2     = uicontrol( ...
                'Style',    'popup', ...
                'String',   {scenes.name}, ...
                'Position', [20, 430, 120, 30], ...
                'Callback', {@scene_popup_Callback} ...
               );
    % Initialise popup menu element
    hpop3     = uicontrol( ...
                'Style',    'popup', ...
                'String',   {' '}, ...
                'Position', [20, 160, 120, 30], ...
                'Enable',   'off', ...
                'Callback', {@obj_popup_Callback} ...
               ); 
           
    % Initialise text elements
    htxt1    = uicontrol( ...
                'Style',    'text', ...
                'String',   'Manual Matching:', ...
                'FontWeight', 'bold', ...
                'FontSize',   11, ...
                'Position', [20, 400, 130, 18] ...
               );
    htxt2    = uicontrol( ...
                'Style',    'text', ...
                'String',   'Select scene:', ...
                'FontSize',   11, ...
                'Position', [20, 470, 100, 18] ...
               );
    htxt3    = uicontrol( ...
                'Style',    'text', ...
                'String',   'Select object:', ...
                'FontSize',   11, ...
                'Position', [18, 380, 100, 18] ...
               );
    htxt4    = uicontrol( ...
                'Style',    'text', ...
                'String',    'Standing by.', ...
                'FontSize',  11, ...
                'FontName',  'Courier', ...
                'Position',  [20, 10, 150, 70] ...
               );
    htxt5    = uicontrol( ...
                'Style',    'text', ...
                'String',   'Automatic Matching:', ...
                'FontWeight', 'bold', ...
                'FontSize',   11, ...
                'Position', [18, 270, 150, 18] ...
               );
    htxt6    = uicontrol( ...
                'Style',    'text', ...
                'String',   'Detected objects:', ...
                'FontSize',   11, ...
                'Position', [20, 200, 120, 18] ...
               );
    htxt7    = uicontrol( ...
                'Style',    'text', ...
                'String',   'Threshold:', ...
                'FontSize',   11, ...
                'Position', [20, 100, 80, 18] ...
               );
           
     % Initialise image elements
	ha1       = axes( ...
                'Units',    'pixels', ...
                'Position', [200,20,760,460], ...
                'Tag',      'ha1' ...
               );
    axis off;
     
    % Initialize the UI.
    % Change units to normalized so components resize automatically.
    f.Units        = 'normalized';
    ha1.Units      = 'normalized';
    
    hpop1.Units    = 'normalized';
    hpop2.Units    = 'normalized';
    hpop3.Units    = 'normalized';
    
    hbtn1.Units    = 'normalized';
    hbtn2.Units    = 'normalized';
    hbtn3.Units    = 'normalized';
    
    hedt1.Units    = 'normalized';
    
    htxt1.Units    = 'normalized';
    htxt2.Units    = 'normalized';
    htxt3.Units    = 'normalized';
    htxt4.Units    = 'normalized';
    htxt5.Units    = 'normalized';
    htxt6.Units    = 'normalized';
    htxt7.Units    = 'normalized';
 
    % Assign a name to appear in the window title.
    f.Name = 'CITS4402 Project';

    % Move the window to the center of the screen.
    movegui(f,'center')

    % Share GUI elements with callbacks
    tmp1  = {objects.name};
    tmp2 = {scenes.name};
    cur_obj  = tmp1(1);
    cur_scn  = tmp2(1);
    thrs = 10;
    guidata(f, struct( ...
        'ha1',     ha1, ...
        'txt4',    htxt4, ...
        'thrs',    thrs, ...
        'hpop3',   hpop3, ...
        'hbtn3',   hbtn3, ...
        'cur_obj', cur_obj, ...
        'cur_scn', cur_scn ...
    ));
    
    % Make the UI visible.
    f.Visible = 'on';
    
    % This function sets the internal threshold variable when the value is
    % changed on the GUI
    function thrs_edit_Callback(source, eventdata) 
        data = guidata(source);

        str = get(source, 'String');
        
        if isempty(str2num(str))
            set(source, 'String', 1);
            warndlg('Input must be numerical');
        else
            thrs = str2num(str);
        end
        
        guidata(source, data);
    end
    
    % This function calls the scene.m function to process the currently
    % selected scene and object and display the results on the GUI
    function match_button_Callback(source, eventdata) 
        data = guidata(source);

        data.txt4.String = 'Processing...';
        drawnow
        scene(cur_obj, cur_scn, objects, scenes, thrs, data);
        guidata(source, data);
    end

    % This function calls the scene_all.m function to process the currently
    % selected scene, and update the appropriate list on the GUI
	function matchall_button_Callback(source, eventdata) 
        data = guidata(source);

        data.hpop3.Enable = 'off';
        data.hbtn3.Enable = 'off';
        
        data.txt4.String = 'Processing...';
        drawnow
        
        detected_obj = scene_all(cur_scn, objects, scenes, thrs, data);
        
        if (length(detected_obj) > 0)
            data.hpop3.String = detected_obj;
            data.hpop3.Enable = 'on';
            data.hpop3.Value  = 1;
            data.hbtn3.Enable = 'on';
        
            cur_obj = detected_obj{1};
        else
            data.hpop3.String = '';
            data.hpop3.Enable = 'off';
            data.hpop3.Value  = 1;
            data.hbtn3.Enable = 'off';
        end

        guidata(source, data);
    end

    % This function updates the internal object variable when a new object
    % is selected
    function obj_popup_Callback(source, eventdata)
        data = guidata(source);

        cur_obj = source.String{source.Value};
        
        guidata(source, data);
    end

    % This function updates the internal scene variable when a new scene is
    % selected. Additionally, this function displays the scene on the left
    % of the GUI.
    function scene_popup_Callback(source, eventdata)
        data = guidata(source);
        
        data.txt4.String = 'Loading scene...';
        drawnow
        
        cur_scn = source.String{source.Value};
        imshow(strcat('img/scenes/', cur_scn));
        
        data.txt4.String = 'Standing by.';
        
        guidata(source, data);
    end

end